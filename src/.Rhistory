}))
})) / n
g20 <- sapply(1:p, function(j){mean(-hpx[,j]/x[,j] + hx[,j]/x[,j]^2)})
for (use_C in c(T, F)) {
for (centered in c(T, F)) {
res <- get_loglog_tmp(use_C, hx, hpx, x, "log_log", F,
centered=centered, profiled_if_noncenter=FALSE,
scale="norm", diagonal_multiplier=multiplier)
# Test if two are equivalent (for centered/noncentered nonprofiled only)
if (res$centered || !res$profiled_if_noncenter) {
print(sum(abs(res$Gamma_K - GammaK0)))
print(sum(abs(res$diagonals_with_multiplier -
sapply(1:p, function(j){diag(GammaK0[,(j-1)*p+1:p]) * res$diagonal_multiplier}))))
print(sum(abs(res$g_K - g10)))
}
if (!res$centered && !res$profiled_if_noncenter) {
print(sum(abs(res$Gamma_K_eta - GammaKeta0)))
print(sum(abs(res$Gamma_eta - Gammaeta0)))
print(sum(abs(res$g_eta - g20)))
}
}
}
res$Gamma_K
dim(res$Gamma_K)
dim(GammaK0)
use_C
centered
marg_off <- function(mat, j) {
# mat_{-j,-j} - 2*mat_{-j,j}*1' + mat_{jj}*1*1'
mat[-j, -j] <- mat[-j, -j] - 2 * mat[-j, j] + mat[j, j]
mat[, j] <- mat[j, ] <- 0
return(mat)
}
get_elts_loglog <- function(hx, hpx, x, setting, offdiag_only,
centered=TRUE, profiled_if_noncenter=TRUE,
scale="norm", diagonal_multiplier=1){
### centered and profiled_if_noncenter IGNORED, just for compatibility
if (setting != "log_log")
stop("Setting must be log_log if calling get_elts_loglog.")
n <- dim(x)[1]; p <- dim(x)[2]
if (any(x <= 0))
stop("All entries in x must be positive.")
logx <- log(x)
h_over_xsq <- hx / x^2
hp_over_x <- hpx / x
g_K <- crossprod(logx, hp_over_x - h_over_xsq)/n + diag(colMeans(h_over_xsq))
if (offdiag_only)
g_K <- t(t(g_K) - diag(g_K)) # g_j <- g_j - g_jj
g_K <- c(g_K)
if (centered) {
Gamma_K <- Reduce(cbind, lapply(1:p, function(j){t(logx) %*% diag(h_over_xsq[,j]) %*% logx / n}))
} else {
logx_m1 <- cbind(logx, -1)
Gamma0 <- Reduce(cbind, lapply(1:p, function(j){t(logx_m1) %*% diag(h_over_xsq[,j]) %*% logx_m1 / n}))
Gamma_K <- Gamma0[-p-1, -c(1:p)*(p+1)]
}
if (offdiag_only)
Gamma_K <- sapply(1:p, function(j){marg_off(Gamma_K[,(j-1)*p+1:p], j)})
diagonals_with_multiplier <- Gamma_K[(1:p^2-1)*p + rep(1:p,p)] * diagonal_multiplier
if (centered)
return (list("n"=n, "p"=p, "g_K"=g_K, "Gamma_K"=Gamma_K, "centered"=TRUE, "scale"=scale, "diagonal_multiplier"=diagonal_multiplier, "diagonals_with_multiplier"=diagonals_with_multiplier, setting=setting))
Gamma_K_eta <- Gamma0[-p-1, c(1:p)*(p+1)]
if (offdiag_only)
Gamma_K_eta <- t(t(Gamma_K_eta) - diag(Gamma_K_eta)) # Gamma_K_eta_j <- Gamma_K_eta_j - Gamma_K_eta_jj
Gamma_eta <- Gamma0[p+1, c(1:p)*(p+1)]
remove(Gamma0)
g_eta <- colMeans(-hp_over_x + h_over_xsq)
if (!profiled_if_noncenter)
return (list("n"=n, "p"=p, "g_K"=g_K, "g_eta"=g_eta, "Gamma_K"=Gamma_K, "Gamma_K_eta"=Gamma_K_eta, "Gamma_eta"=Gamma_eta, "centered"=FALSE, "scale"=scale, "profiled_if_noncenter"=FALSE, "diagonal_multiplier"=diagonal_multiplier, "diagonals_with_multiplier"=diagonals_with_multiplier, setting=setting))
Gamma12Gamma22inv <- sweep(Gamma_K_eta, MARGIN=2, Gamma_eta, `/`)
subtmp <- do.call("cbind", lapply(1:p, function(k){tcrossprod(Gamma12Gamma22inv[,k], Gamma_K_eta[,k])})) ## Gamma1flat
Gamma_K <- Gamma_K - subtmp
diagonals_with_multiplier <- diagonals_with_multiplier - subtmp[(1:p^2-1)*p+rep(1:p,p)]
g_K <- g_K - sweep(Gamma12Gamma22inv, MARGIN=2, g_eta, `*`)
return (list("n"=n, "p"=p, "g_K"=g_K, "Gamma_K"=Gamma_K, "t1"=g_eta/Gamma_eta, "t2"=Gamma12Gamma22inv, "centered"=FALSE, "scale"=scale, "profiled_if_noncenter"=TRUE, "diagonal_multiplier"=diagonal_multiplier, "diagonals_with_multiplier"=diagonals_with_multiplier, setting=setting))
}
get_loglog_tmp <- function(use_C, hx, hpx, x, setting, offdiag_only,
centered=TRUE, profiled_if_noncenter=TRUE,
scale="norm", diagonal_multiplier=1){
n <- nrow(x); p <- ncol(x)
if (use_C) {
if (centered) {
res <- .C("elts_loglog_c", nIn=as.integer(n), pIn=as.integer(p), hx=as.double(hx), hpx=as.double(hpx), x=as.double(x), g1=as.double(numeric(p^2)), d=as.double(numeric(p)), Gamma=as.double(numeric(p^3)), diagonal_multiplier=as.double(diagonal_multiplier), diagonals_with_multiplier=as.double(numeric(p^2)), logx=as.double(numeric(n*p)), h_over_xsq=as.double(numeric(n*p)), hp_over_x=as.double(numeric(n*p))
)# !!!!!REMEMBER THIS IN PACKAGE!!!!!, PACKAGE="genscore")
return (list("n"=n, "p"=p, "offdiag_only"=offdiag_only,
"g_K"=res$g1, "Gamma_K"=matrix(res$Gamma,nrow=p,ncol=p^2),
"centered"=TRUE, "scale"=scale, "diagonal_multiplier"=diagonal_multiplier,
"diagonals_with_multiplier"=res$diagonals_with_multiplier, setting=setting))
} else if (!profiled_if_noncenter) {
res <- .C("elts_loglog_np", nIn=as.integer(n), pIn=as.integer(p), hx=as.double(hx), hpx=as.double(hpx), x=as.double(x), g1=as.double(numeric(p^2)), g2=as.double(numeric(p)), d=as.double(numeric(p)), Gamma=as.double(numeric(p^3)), Gamma12=as.double(numeric(p^2)), diagonal_multiplier=as.double(diagonal_multiplier), diagonals_with_multiplier=as.double(numeric(p^2))
)# !!!!!REMEMBER THIS IN PACKAGE!!!!!, , PACKAGE="genscore")
return (list("n"=n, "p"=p, "offdiag_only"=offdiag_only, "g_K"=res$g1, "g_eta"=res$g2, "Gamma_K"=matrix(res$Gamma,nrow=p,ncol=p^2), "Gamma_K_eta"=matrix(res$Gamma12,p,p), "Gamma_eta"=res$d, "centered"=FALSE, "scale"=scale, "profiled_if_noncenter"=FALSE, "diagonal_multiplier"=diagonal_multiplier, "diagonals_with_multiplier"=res$diagonals_with_multiplier, setting=setting))
} else {
res <- .C("elts_loglog_p", nIn=as.integer(n), pIn=as.integer(p), hx=as.double(hx), hpx=as.double(hpx), x=as.double(x), g1=as.double(numeric(p^2)), g2=as.double(numeric(p)), d=as.double(numeric(p)), Gamma=as.double(numeric(p^3)), Gamma12=as.double(numeric(p^2)), diagonal_multiplier=as.double(diagonal_multiplier), diagonals_with_multiplier=as.double(numeric(p^2))
)# !!!!!REMEMBER THIS IN PACKAGE!!!!!, , PACKAGE="genscore")
return (list("n"=n, "p"=p, "offdiag_only"=offdiag_only, "g_K"=res$g1, "Gamma_K"=matrix(res$Gamma,nrow=p,ncol=p^2), "t1"=res$g2, "t2"=matrix(res$Gamma12,p,p), "centered"=FALSE, "scale"=scale, "profiled_if_noncenter"=TRUE, "diagonal_multiplier"=diagonal_multiplier, "diagonals_with_multiplier"=res$diagonals_with_multiplier, setting=setting))
}
} else
return (get_elts_loglog(hx, hpx, x, "log_log", offdiag_only, centered=centered, profiled_if_noncenter=profiled_if_noncenter, scale=scale, diagonal_multiplier=diagonal_multiplier))
}
n <- 200; p <- 50
x <- abs(matrix(rnorm(n*p), nrow=n))
h <- function(x){x*0.9+x^1.3*0.53+x^2.3*0.37}
hp <- function(x){0.9+0.53*1.3*x^0.3+0.37*2.3*x^1.3}
hx <- h(x)
hpx <- hp(x)
multiplier <- 1.3
GammaK0 <- Reduce(cbind, lapply(1:p, function(j){
Reduce("+", lapply(1:n, function(i){hx[i,j]/x[i,j]^2*
log(x[i,])%*%t(log(x[i,]))}))
})) / n
GammaKeta0 <- Reduce(cbind, lapply(1:p, function(j){
Reduce("+", lapply(1:n, function(i){hx[i,j]/x[i,j]^2*
-log(x[i,])
}))})) / n
Gammaeta0 <- Reduce(cbind, lapply(1:p, function(j){
Reduce("+", lapply(1:n, function(i){hx[i,j]/x[i,j]^2
}))})) / n
g10 <- Reduce(cbind, lapply(1:p, function(j){
Reduce("+", lapply(1:n, function(i){
tmp <- (hpx[i,j]/x[i,j] - hx[i,j]/x[i,j]^2)*log(x[i,]);
tmp[j] <- tmp[j] + hx[i,j]/x[i,j]^2
tmp
}))
})) / n
g20 <- sapply(1:p, function(j){mean(-hpx[,j]/x[,j] + hx[,j]/x[,j]^2)})
for (use_C in c(T, F)) {
for (centered in c(T, F)) {
res <- get_loglog_tmp(use_C, hx, hpx, x, "log_log", F,
centered=centered, profiled_if_noncenter=FALSE,
scale="norm", diagonal_multiplier=multiplier)
# Test if two are equivalent (for centered/noncentered nonprofiled only)
if (res$centered || !res$profiled_if_noncenter) {
print(sum(abs(res$Gamma_K - GammaK0)))
print(sum(abs(res$diagonals_with_multiplier -
sapply(1:p, function(j){diag(GammaK0[,(j-1)*p+1:p]) * res$diagonal_multiplier}))))
print(sum(abs(res$g_K - g10)))
}
if (!res$centered && !res$profiled_if_noncenter) {
print(sum(abs(res$Gamma_K_eta - GammaKeta0)))
print(sum(abs(res$Gamma_eta - Gammaeta0)))
print(sum(abs(res$g_eta - g20)))
}
}
}
dim(get_loglog_tmp(F, hx, hpx, x, "log_log", F,
centered=centered, profiled_if_noncenter=FALSE,
scale="norm", diagonal_multiplier=multiplier)
$Gamma_K)
dim(get_loglog_tmp(F, hx, hpx, x, "log_log", T,
centered=centered, profiled_if_noncenter=FALSE,
scale="norm", diagonal_multiplier=multiplier)
$Gamma_K)
dim(res$Gamma_K)
dim(sapply(1:p, function(j){(Gamma_K[,(j-1)*p+1:p])}))
dim(sapply(1:p, function(j){(res$Gamma_K[,(j-1)*p+1:p])}))
sum(abs(sapply(1:p, function(j){(res$Gamma_K[,(j-1)*p+1:p])})  - res$Gamma_K))
sum(abs(t(sapply(1:p, function(j){(res$Gamma_K[,(j-1)*p+1:p])})) - res$Gamma_K))
dim(Reduce(cbind, lapply(1:p, function(j){Gamma_K[,(j-1)*p+1:p]})))
dim(Reduce(cbind, lapply(1:p, function(j){res$Gamma_K[,(j-1)*p+1:p]})))
sum(abs(res$Gamma_K - Reduce(cbind, lapply(1:p, function(j){res$Gamma_K[,(j-1)*p+1:p]}))))
K <- matrix(rnorm(p*p), p); K <- (K+t(K)) / 2
eta <- rnorm(p)
pj <- function(i,j,centered){
if (centered) c(-((K[j,]+K[,j])%*%log(x[i,]))/(2*x[i,j]))
else c(-(-2*eta[j]+(K[j,]+K[,j])%*%log(x[i,]))/(2*x[i,j]))}
pjj <- function(i,j,centered){
if (centered) c((-2*K[j,j]+(K[j,]+K[,j])%*%log(x[i,]))/(2*x[i,j]^2))
else c((-2*eta[j]-2*K[j,j]+(K[j,]+K[,j])%*%log(x[i,]))/(2*x[i,j]^2))
}
1/n * sum(sapply(1:n, function(i){sum(sapply(1:p, function(j){
hp(x[i,j])*pj(i,j,T) + h(x[i,j])*(pjj(i,j,T)+1/2*pj(i,j,T)^2)
}))}))
sum(sapply(1:p, function(j){K[j,]%*%GammaK0[,(j-1)*p+1:p]%*%K[,j]/2 -
sum(g10[,j]*K[,j])
}))
1/n * sum(sapply(1:n, function(i){sum(sapply(1:p, function(j){
hp(x[i,j])*pj(i,j,F) + h(x[i,j])*(pjj(i,j,F)+1/2*pj(i,j,F)^2)
}))}))
sum(sapply(1:p, function(j){K[j,]%*%GammaK0[,(j-1)*p+1:p]%*%K[,j]/2+
K[j,]%*%GammaKeta0[,j]*eta[j]+eta[j]^2*Gammaeta0[j]/2 -
sum(g10[,j]*K[,j]) - g20[j]*eta[j]
}))
for (use_C in c(T, F)) {
res_profiled <- get_loglog_tmp(use_C, hx, hpx, x, "log_log",
centered=FALSE, profiled_if_noncenter=TRUE,
scale="norm", diagonal_multiplier=multiplier)
eta <- res_profiled$t1 - sapply(1:p, function(j){res_profiled$t2[,j]%*%K[,j]})
print(1/n * sum(sapply(1:n, function(i){sum(sapply(1:p, function(j){
hp(x[i,j])*pj(i,j,F) + h(x[i,j])*(pjj(i,j,F)+1/2*pj(i,j,F)^2)
}))})))
print(sum(sapply(1:p, function(j){K[j,]%*%res_profiled$Gamma_K[,(j-1)*p+1:p]%*%K[,j]/2 -
sum(res_profiled$g_K[(j-1)*p+1:p]*K[,j])
})) - sum(g20^2/Gammaeta0)/2)
}
for (use_C in c(T, F)) {
res_profiled <- get_loglog_tmp(use_C, hx, hpx, x, "log_log",
offdiag_only=FALSE,
centered=FALSE, profiled_if_noncenter=TRUE,
scale="norm", diagonal_multiplier=multiplier)
eta <- res_profiled$t1 - sapply(1:p, function(j){res_profiled$t2[,j]%*%K[,j]})
print(1/n * sum(sapply(1:n, function(i){sum(sapply(1:p, function(j){
hp(x[i,j])*pj(i,j,F) + h(x[i,j])*(pjj(i,j,F)+1/2*pj(i,j,F)^2)
}))})))
print(sum(sapply(1:p, function(j){K[j,]%*%res_profiled$Gamma_K[,(j-1)*p+1:p]%*%K[,j]/2 -
sum(res_profiled$g_K[(j-1)*p+1:p]*K[,j])
})) - sum(g20^2/Gammaeta0)/2)
}
K <- matrix(rnorm(p*p), p); K <- (K+t(K)) / 2; diag(K) <- rowSums(K) - diag(K)
rowSums(K)
K <- matrix(rnorm(p*p), p); K <- (K+t(K)) / 2; diag(K) <- diag(K) - rowSums(K)
rowSums(K)
colSums(K)
diag(K)
eta <- rnorm(p)
pj <- function(i,j,centered){
if (centered) c(-((K[j,]+K[,j])%*%log(x[i,]))/(2*x[i,j]))
else c(-(-2*eta[j]+(K[j,]+K[,j])%*%log(x[i,]))/(2*x[i,j]))}
pjj <- function(i,j,centered){
if (centered) c((-2*K[j,j]+(K[j,]+K[,j])%*%log(x[i,]))/(2*x[i,j]^2))
else c((-2*eta[j]-2*K[j,j]+(K[j,]+K[,j])%*%log(x[i,]))/(2*x[i,j]^2))
}
1/n * sum(sapply(1:n, function(i){sum(sapply(1:p, function(j){
hp(x[i,j])*pj(i,j,T) + h(x[i,j])*(pjj(i,j,T)+1/2*pj(i,j,T)^2)
}))}))
sum(sapply(1:p, function(j){K[j,]%*%GammaK0[,(j-1)*p+1:p]%*%K[,j]/2 -
sum(g10[,j]*K[,j])
}))
K <- matrix(rnorm(p*p), p); K <- (K+t(K)) / 2; diag(K) <- diag(K) - rowSums(K)
for (use_C in c(T, F)) {
res_profiled <- get_loglog_tmp(use_C, hx, hpx, x, "log_log",
offdiag_only=TRUE,
centered=FALSE, profiled_if_noncenter=TRUE,
scale="norm", diagonal_multiplier=multiplier)
print(1/n * sum(sapply(1:n, function(i){sum(sapply(1:p, function(j){
hp(x[i,j])*pj(i,j,T) + h(x[i,j])*(pjj(i,j,T)+1/2*pj(i,j,T)^2)
}))})))
print(sum(sapply(1:p, function(j){K[j,]%*%res$Gamma_K[,(j-1)*p+1:p]%*%K[,j]/2 -
sum(res$g_K[,j]*K[,j])
})))
}
res$g_K
for (use_C in c(T, F)) {
res_profiled <- get_loglog_tmp(use_C, hx, hpx, x, "log_log",
offdiag_only=TRUE,
centered=FALSE, profiled_if_noncenter=TRUE,
scale="norm", diagonal_multiplier=multiplier)
print(1/n * sum(sapply(1:n, function(i){sum(sapply(1:p, function(j){
hp(x[i,j])*pj(i,j,T) + h(x[i,j])*(pjj(i,j,T)+1/2*pj(i,j,T)^2)
}))})))
print(sum(sapply(1:p, function(j){K[j,]%*%res$Gamma_K[,(j-1)*p+1:p]%*%K[,j]/2 -
sum(res$g_K[(j-1)*p+1:p]*K[,j])
})))
}
for (use_C in c(T, F)) {
res_profiled <- get_loglog_tmp(use_C, hx, hpx, x, "log_log",
offdiag_only=TRUE,
centered=TRUE, profiled_if_noncenter=TRUE,
scale="norm", diagonal_multiplier=multiplier)
print(1/n * sum(sapply(1:n, function(i){sum(sapply(1:p, function(j){
hp(x[i,j])*pj(i,j,T) + h(x[i,j])*(pjj(i,j,T)+1/2*pj(i,j,T)^2)
}))})))
print(sum(sapply(1:p, function(j){K[j,]%*%res$Gamma_K[,(j-1)*p+1:p]%*%K[,j]/2 -
sum(res$g_K[(j-1)*p+1:p]*K[,j])
})))
}
setdiff(1:p, 2)
setdiff(1:p, 1)
setdiff(1:p, 50)
for (use_C in c(T, F)) {
res_profiled <- get_loglog_tmp(use_C, hx, hpx, x, "log_log",
offdiag_only=TRUE,
centered=TRUE, profiled_if_noncenter=TRUE,
scale="norm", diagonal_multiplier=multiplier)
print(1/n * sum(sapply(1:n, function(i){sum(sapply(1:p, function(j){
hp(x[i,j])*pj(i,j,T) + h(x[i,j])*(pjj(i,j,T)+1/2*pj(i,j,T)^2)
}))})))
print(sum(sapply(1:p, function(j){K[j,]%*%res$Gamma_K[,(j-1)*p+1:p]%*%K[,j]/2 -
sum(res$g_K[(j-1)*p+1:p]*K[,j])
})))
print(sum(sapply(1:p, function(j){K[j,-j]%*%res$Gamma_K[-j,(j-1)*p+setdiff(1:p,j)]%*%K[-j,j]/2 -
sum(res$g_K[(j-1)*p+setdiff(1:p,j)]*K[-j,j])
})))
}
res$Gamma_K[-j,(j-1)*p+setdiff(1:p,j)]
res$Gamma_K[-2,(2-1)*p+setdiff(1:p,2)]
dim(res$Gamma_K[-2,(2-1)*p+setdiff(1:p,2)])
for (use_C in c(T, F)) {
res_profiled <- get_loglog_tmp(use_C, hx, hpx, x, "log_log",
offdiag_only=FALSE,
centered=TRUE, profiled_if_noncenter=TRUE,
scale="norm", diagonal_multiplier=multiplier)
print(1/n * sum(sapply(1:n, function(i){sum(sapply(1:p, function(j){
hp(x[i,j])*pj(i,j,T) + h(x[i,j])*(pjj(i,j,T)+1/2*pj(i,j,T)^2)
}))})))
print(sum(sapply(1:p, function(j){K[j,]%*%res$Gamma_K[,(j-1)*p+1:p]%*%K[,j]/2 -
sum(res$g_K[(j-1)*p+1:p]*K[,j])
})))
res_profiled <- get_loglog_tmp(use_C, hx, hpx, x, "log_log",
offdiag_only=TRUE,
centered=TRUE, profiled_if_noncenter=TRUE,
scale="norm", diagonal_multiplier=multiplier)
print(sum(sapply(1:p, function(j){K[j,-j]%*%res$Gamma_K[-j,(j-1)*p+setdiff(1:p,j)]%*%K[-j,j]/2 -
sum(res$g_K[(j-1)*p+setdiff(1:p,j)]*K[-j,j])
})))
}
res_all <- get_loglog_tmp(use_C, hx, hpx, x, "log_log",
offdiag_only=FALSE,
centered=TRUE, profiled_if_noncenter=TRUE,
scale="norm", diagonal_multiplier=multiplier)
use_C
res_all <- get_loglog_tmp(use_C, hx, hpx, x, "log_log",
offdiag_only=FALSE,
centered=TRUE, profiled_if_noncenter=TRUE,
scale="norm", diagonal_multiplier=multiplier)
res_no_off <- get_loglog_tmp(use_C, hx, hpx, x, "log_log",
offdiag_only=TRUE,
centered=TRUE, profiled_if_noncenter=TRUE,
scale="norm", diagonal_multiplier=multiplier)
res_no_off$Gamma_K
res_no_off$Gamma_K[1:5,1:5]
remove(res)
for (use_C in c(T, F)) {
res_all <- get_loglog_tmp(use_C, hx, hpx, x, "log_log",
offdiag_only=FALSE,
centered=TRUE, profiled_if_noncenter=TRUE,
scale="norm", diagonal_multiplier=multiplier)
print(1/n * sum(sapply(1:n, function(i){sum(sapply(1:p, function(j){
hp(x[i,j])*pj(i,j,T) + h(x[i,j])*(pjj(i,j,T)+1/2*pj(i,j,T)^2)
}))})))
print(sum(sapply(1:p, function(j){K[j,]%*%res_all$Gamma_K[,(j-1)*p+1:p]%*%K[,j]/2 -
sum(res$g_K[(j-1)*p+1:p]*K[,j])
})))
res_no_off <- get_loglog_tmp(use_C, hx, hpx, x, "log_log",
offdiag_only=TRUE,
centered=TRUE, profiled_if_noncenter=TRUE,
scale="norm", diagonal_multiplier=multiplier)
print(sum(sapply(1:p, function(j){K[j,-j]%*%res_no_off$Gamma_K[-j,(j-1)*p+setdiff(1:p,j)]%*%K[-j,j]/2 -
sum(res$g_K[(j-1)*p+setdiff(1:p,j)]*K[-j,j])
})))
}
for (use_C in c(T, F)) {
res_all <- get_loglog_tmp(use_C, hx, hpx, x, "log_log",
offdiag_only=FALSE,
centered=TRUE, profiled_if_noncenter=TRUE,
scale="norm", diagonal_multiplier=multiplier)
print(1/n * sum(sapply(1:n, function(i){sum(sapply(1:p, function(j){
hp(x[i,j])*pj(i,j,T) + h(x[i,j])*(pjj(i,j,T)+1/2*pj(i,j,T)^2)
}))})))
print(sum(sapply(1:p, function(j){K[j,]%*%res_all$Gamma_K[,(j-1)*p+1:p]%*%K[,j]/2 -
sum(res_all$g_K[(j-1)*p+1:p]*K[,j])
})))
res_no_off <- get_loglog_tmp(use_C, hx, hpx, x, "log_log",
offdiag_only=TRUE,
centered=TRUE, profiled_if_noncenter=TRUE,
scale="norm", diagonal_multiplier=multiplier)
print(sum(sapply(1:p, function(j){K[j,-j]%*%res_no_off$Gamma_K[-j,(j-1)*p+setdiff(1:p,j)]%*%K[-j,j]/2 -
sum(res_no_off$g_K[(j-1)*p+setdiff(1:p,j)]*K[-j,j])
})))
}
res_no_off$g_K
dim(res_no_off$g_K)
length(res_no_off$g_K)
length(res_no_off$g_K[(j-1)*p+setdiff(1:p,j)])
length(res_no_off$g_K[(2-1)*p+setdiff(1:p,2)])
use_C
res_all <- get_loglog_tmp(use_C, hx, hpx, x, "log_log",
offdiag_only=FALSE,
centered=TRUE, profiled_if_noncenter=TRUE,
scale="norm", diagonal_multiplier=multiplier)
print(1/n * sum(sapply(1:n, function(i){sum(sapply(1:p, function(j){
hp(x[i,j])*pj(i,j,T) + h(x[i,j])*(pjj(i,j,T)+1/2*pj(i,j,T)^2)
}))})))
print(sum(sapply(1:p, function(j){K[j,]%*%res_all$Gamma_K[,(j-1)*p+1:p]%*%K[,j]/2 -
sum(res_all$g_K[(j-1)*p+1:p]*K[,j])
})))
res_no_off <- get_loglog_tmp(use_C, hx, hpx, x, "log_log",
offdiag_only=TRUE,
centered=TRUE, profiled_if_noncenter=TRUE,
scale="norm", diagonal_multiplier=multiplier)
print(sum(sapply(1:p, function(j){K[j,-j]%*%res_no_off$Gamma_K[-j,(j-1)*p+setdiff(1:p,j)]%*%K[-j,j]/2 -
sum(res_no_off$g_K[(j-1)*p+setdiff(1:p,j)]*K[-j,j])
})))
dim(res_no_off$Gamma_K)
marg_off <- function(mat, j) {
# mat_{-j,-j} - 2*mat_{-j,j}*1' + mat_{jj}*1*1'
mat[-j, -j] <- mat[-j, -j] - 2 * mat[-j, j] + mat[j, j]
mat[, j] <- mat[j, ] <- 0
return(mat)
}
get_elts_loglog <- function(hx, hpx, x, setting, offdiag_only,
centered=TRUE, profiled_if_noncenter=TRUE,
scale="norm", diagonal_multiplier=1){
### centered and profiled_if_noncenter IGNORED, just for compatibility
if (setting != "log_log")
stop("Setting must be log_log if calling get_elts_loglog.")
n <- dim(x)[1]; p <- dim(x)[2]
if (any(x <= 0))
stop("All entries in x must be positive.")
logx <- log(x)
h_over_xsq <- hx / x^2
hp_over_x <- hpx / x
g_K <- crossprod(logx, hp_over_x - h_over_xsq)/n + diag(colMeans(h_over_xsq))
if (offdiag_only)
g_K <- t(t(g_K) - diag(g_K)) # g_j <- g_j - g_jj
g_K <- c(g_K)
if (centered) {
Gamma_K <- Reduce(cbind, lapply(1:p, function(j){t(logx) %*% diag(h_over_xsq[,j]) %*% logx / n}))
} else {
logx_m1 <- cbind(logx, -1)
Gamma0 <- Reduce(cbind, lapply(1:p, function(j){t(logx_m1) %*% diag(h_over_xsq[,j]) %*% logx_m1 / n}))
Gamma_K <- Gamma0[-p-1, -c(1:p)*(p+1)]
}
if (offdiag_only)
Gamma_K <- Reduce(cbind, lapply(1:p, function(j){marg_off(Gamma_K[,(j-1)*p+1:p], j)}))
diagonals_with_multiplier <- Gamma_K[(1:p^2-1)*p + rep(1:p,p)] * diagonal_multiplier
if (centered)
return (list("n"=n, "p"=p, "g_K"=g_K, "Gamma_K"=Gamma_K, "centered"=TRUE, "scale"=scale, "diagonal_multiplier"=diagonal_multiplier, "diagonals_with_multiplier"=diagonals_with_multiplier, setting=setting))
Gamma_K_eta <- Gamma0[-p-1, c(1:p)*(p+1)]
if (offdiag_only)
Gamma_K_eta <- t(t(Gamma_K_eta) - diag(Gamma_K_eta)) # Gamma_K_eta_j <- Gamma_K_eta_j - Gamma_K_eta_jj
Gamma_eta <- Gamma0[p+1, c(1:p)*(p+1)]
remove(Gamma0)
g_eta <- colMeans(-hp_over_x + h_over_xsq)
if (!profiled_if_noncenter)
return (list("n"=n, "p"=p, "g_K"=g_K, "g_eta"=g_eta, "Gamma_K"=Gamma_K, "Gamma_K_eta"=Gamma_K_eta, "Gamma_eta"=Gamma_eta, "centered"=FALSE, "scale"=scale, "profiled_if_noncenter"=FALSE, "diagonal_multiplier"=diagonal_multiplier, "diagonals_with_multiplier"=diagonals_with_multiplier, setting=setting))
Gamma12Gamma22inv <- sweep(Gamma_K_eta, MARGIN=2, Gamma_eta, `/`)
subtmp <- do.call("cbind", lapply(1:p, function(k){tcrossprod(Gamma12Gamma22inv[,k], Gamma_K_eta[,k])})) ## Gamma1flat
Gamma_K <- Gamma_K - subtmp
diagonals_with_multiplier <- diagonals_with_multiplier - subtmp[(1:p^2-1)*p+rep(1:p,p)]
g_K <- g_K - sweep(Gamma12Gamma22inv, MARGIN=2, g_eta, `*`)
return (list("n"=n, "p"=p, "g_K"=g_K, "Gamma_K"=Gamma_K, "t1"=g_eta/Gamma_eta, "t2"=Gamma12Gamma22inv, "centered"=FALSE, "scale"=scale, "profiled_if_noncenter"=TRUE, "diagonal_multiplier"=diagonal_multiplier, "diagonals_with_multiplier"=diagonals_with_multiplier, setting=setting))
}
get_loglog_tmp <- function(use_C, hx, hpx, x, setting, offdiag_only,
centered=TRUE, profiled_if_noncenter=TRUE,
scale="norm", diagonal_multiplier=1){
n <- nrow(x); p <- ncol(x)
if (use_C) {
if (centered) {
res <- .C("elts_loglog_c", nIn=as.integer(n), pIn=as.integer(p), hx=as.double(hx), hpx=as.double(hpx), x=as.double(x), g1=as.double(numeric(p^2)), d=as.double(numeric(p)), Gamma=as.double(numeric(p^3)), diagonal_multiplier=as.double(diagonal_multiplier), diagonals_with_multiplier=as.double(numeric(p^2)), logx=as.double(numeric(n*p)), h_over_xsq=as.double(numeric(n*p)), hp_over_x=as.double(numeric(n*p))
)# !!!!!REMEMBER THIS IN PACKAGE!!!!!, PACKAGE="genscore")
return (list("n"=n, "p"=p, "offdiag_only"=offdiag_only,
"g_K"=res$g1, "Gamma_K"=matrix(res$Gamma,nrow=p,ncol=p^2),
"centered"=TRUE, "scale"=scale, "diagonal_multiplier"=diagonal_multiplier,
"diagonals_with_multiplier"=res$diagonals_with_multiplier, setting=setting))
} else if (!profiled_if_noncenter) {
res <- .C("elts_loglog_np", nIn=as.integer(n), pIn=as.integer(p), hx=as.double(hx), hpx=as.double(hpx), x=as.double(x), g1=as.double(numeric(p^2)), g2=as.double(numeric(p)), d=as.double(numeric(p)), Gamma=as.double(numeric(p^3)), Gamma12=as.double(numeric(p^2)), diagonal_multiplier=as.double(diagonal_multiplier), diagonals_with_multiplier=as.double(numeric(p^2))
)# !!!!!REMEMBER THIS IN PACKAGE!!!!!, , PACKAGE="genscore")
return (list("n"=n, "p"=p, "offdiag_only"=offdiag_only, "g_K"=res$g1, "g_eta"=res$g2, "Gamma_K"=matrix(res$Gamma,nrow=p,ncol=p^2), "Gamma_K_eta"=matrix(res$Gamma12,p,p), "Gamma_eta"=res$d, "centered"=FALSE, "scale"=scale, "profiled_if_noncenter"=FALSE, "diagonal_multiplier"=diagonal_multiplier, "diagonals_with_multiplier"=res$diagonals_with_multiplier, setting=setting))
} else {
res <- .C("elts_loglog_p", nIn=as.integer(n), pIn=as.integer(p), hx=as.double(hx), hpx=as.double(hpx), x=as.double(x), g1=as.double(numeric(p^2)), g2=as.double(numeric(p)), d=as.double(numeric(p)), Gamma=as.double(numeric(p^3)), Gamma12=as.double(numeric(p^2)), diagonal_multiplier=as.double(diagonal_multiplier), diagonals_with_multiplier=as.double(numeric(p^2))
)# !!!!!REMEMBER THIS IN PACKAGE!!!!!, , PACKAGE="genscore")
return (list("n"=n, "p"=p, "offdiag_only"=offdiag_only, "g_K"=res$g1, "Gamma_K"=matrix(res$Gamma,nrow=p,ncol=p^2), "t1"=res$g2, "t2"=matrix(res$Gamma12,p,p), "centered"=FALSE, "scale"=scale, "profiled_if_noncenter"=TRUE, "diagonal_multiplier"=diagonal_multiplier, "diagonals_with_multiplier"=res$diagonals_with_multiplier, setting=setting))
}
} else
return (get_elts_loglog(hx, hpx, x, "log_log", offdiag_only, centered=centered, profiled_if_noncenter=profiled_if_noncenter, scale=scale, diagonal_multiplier=diagonal_multiplier))
}
for (use_C in c(T, F)) {
res_all <- get_loglog_tmp(use_C, hx, hpx, x, "log_log",
offdiag_only=FALSE,
centered=TRUE, profiled_if_noncenter=TRUE,
scale="norm", diagonal_multiplier=multiplier)
print(1/n * sum(sapply(1:n, function(i){sum(sapply(1:p, function(j){
hp(x[i,j])*pj(i,j,T) + h(x[i,j])*(pjj(i,j,T)+1/2*pj(i,j,T)^2)
}))})))
print(sum(sapply(1:p, function(j){K[j,]%*%res_all$Gamma_K[,(j-1)*p+1:p]%*%K[,j]/2 -
sum(res_all$g_K[(j-1)*p+1:p]*K[,j])
})))
res_no_off <- get_loglog_tmp(use_C, hx, hpx, x, "log_log",
offdiag_only=TRUE,
centered=TRUE, profiled_if_noncenter=TRUE,
scale="norm", diagonal_multiplier=multiplier)
print(sum(sapply(1:p, function(j){K[j,-j]%*%res_no_off$Gamma_K[-j,(j-1)*p+setdiff(1:p,j)]%*%K[-j,j]/2 -
sum(res_no_off$g_K[(j-1)*p+setdiff(1:p,j)]*K[-j,j])
})))
}
res_all <- get_loglog_tmp(use_C, hx, hpx, x, "log_log",
offdiag_only=FALSE,
centered=FALSE, profiled_if_noncenter=FALSE,
scale="norm", diagonal_multiplier=multiplier)
print(1/n * sum(sapply(1:n, function(i){sum(sapply(1:p, function(j){
hp(x[i,j])*pj(i,j,F) + h(x[i,j])*(pjj(i,j,F)+1/2*pj(i,j,F)^2)
}))})))
res_all <- get_loglog_tmp(use_C, hx, hpx, x, "log_log",
offdiag_only=FALSE,
centered=FALSE, profiled_if_noncenter=FALSE,
scale="norm", diagonal_multiplier=multiplier)
print(1/n * sum(sapply(1:n, function(i){sum(sapply(1:p, function(j){
hp(x[i,j])*pj(i,j,F) + h(x[i,j])*(pjj(i,j,F)+1/2*pj(i,j,F)^2)
}))})))
print(sum(sapply(1:p, function(j){K[j,]%*%res_all$Gamma_K[,(j-1)*p+1:p]%*%K[,j]/2+
K[j,]%*%Gamma_K_eta[,j]*eta[j]+eta[j]^2*res_all$Gamma_eta[j]/2 -
sum(res_all$g_K[,j]*K[,j]) - res_all$g_eta[j]*eta[j]
})))
print(sum(sapply(1:p, function(j){K[j,]%*%res_all$Gamma_K[,(j-1)*p+1:p]%*%K[,j]/2+
K[j,]%*%res_all$Gamma_K_eta[,j]*eta[j]+eta[j]^2*res_all$Gamma_eta[j]/2 -
sum(res_all$g_K[,j]*K[,j]) - res_all$g_eta[j]*eta[j]
})))
print(1/n * sum(sapply(1:n, function(i){sum(sapply(1:p, function(j){
hp(x[i,j])*pj(i,j,F) + h(x[i,j])*(pjj(i,j,F)+1/2*pj(i,j,F)^2)
}))})))
print(sum(sapply(1:p, function(j){K[j,]%*%res_all$Gamma_K[,(j-1)*p+1:p]%*%K[,j]/2+
K[j,]%*%res_all$Gamma_K_eta[,j]*eta[j]+eta[j]^2*res_all$Gamma_eta[j]/2 -
sum(res_all$g_K[(j-1)*p+1:p]*K[,j]) - res_all$g_eta[j]*eta[j]
})))
print(1/n * sum(sapply(1:n, function(i){sum(sapply(1:p, function(j){
hp(x[i,j])*pj(i,j,F) + h(x[i,j])*(pjj(i,j,F)+1/2*pj(i,j,F)^2)
}))})))
print(sum(sapply(1:p, function(j){K[j,]%*%res_all$Gamma_K[,(j-1)*p+1:p]%*%K[,j]/2+
K[j,]%*%res_all$Gamma_K_eta[,j]*eta[j]+eta[j]^2*res_all$Gamma_eta[j]/2 -
sum(res_all$g_K[(j-1)*p+1:p]*K[,j]) - res_all$g_eta[j]*eta[j]
})))
