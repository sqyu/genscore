res <- do.call(".C", c(list("rab_arms",
nsamp=as.integer(n),
burnin=as.integer(burn_in),
p=as.integer(domain$p),
every=as.integer(thinning),
a_numer=as.integer(a_numer),
a_denom=as.integer(a_denom),
b_numer=as.integer(b_numer),
b_denom=as.integer(b_denom),
abs=as.integer(abs),
xinit=as.double(xinit),
xres=as.double(numeric(n*domain$p)),
eta=as.double(eta),
K=as.double(K),
seed=as.integer(seed),
finite_infinity=as.double(finite_infinity)),
domain_for_C(domain),
list("verbose"=as.integer(verbose), "errno"=as.integer(0))
))
if (res$errno)
stop("Error occurred in C -> rab_arms() called in gen().")
x <- t(matrix(res$xres, nrow=domain$p))
if (remove_outofbound) {
if (verbose)
cat("Testing if all samples are inside the domain.")
inbound <- in_bound(x, domain)
if (!all(inbound))
warning("Row number(s) of generated samples not in domain: ", paste(which(!inbound), collapse=", "), ". Removed.")
x <- x[which(inbound==1), ]
}
return (x)
}
x <- gen(n, setting=setting, abs=FALSE, eta=eta, K=K, domain=domain, finite_infinity=1000,
xinit=xinit, seed=trial + (trial_sub - 1) * trials, burn_in=1000, thinning=100,
verbose=TRUE, remove_outofbound=TRUE)
x
hist(x)
document()
build(vignettes = F)
install(build_vignettes = F)
remove(gen)
x <- gen(n, setting=setting, abs=FALSE, eta=eta, K=K, domain=domain, finite_infinity=1000,
xinit=NULL, seed=trial + (trial_sub - 1) * trials, burn_in=1000, thinning=100,
verbose=TRUE, remove_outofbound=TRUE)
tpfp <- list()
tpfp_bic <- matrix(NA, nrow=length(modes), ncol=2*length(eBIC_gammas))
tpfp_bic_refit <- matrix(NA, nrow=length(modes), ncol=2*length(eBIC_gammas))
tpfp_cv <- matrix(NA, nrow=length(modes), ncol=2)
error_norm_bic <- error_norm_bic_nopen <- error_norm_bic_refit <- error_norm_bic_refit_nopen <- lapply(1:6, function(i){matrix(NA, nrow=length(modes), ncol=length(eBIC_gammas))})
error_norm_cv <- error_norm_cv_nopen <- lapply(1:6, function(i){matrix(NA, nrow=length(modes), ncol=1)})
names(error_norm_bic) <- names(error_norm_bic_nopen) <- names(error_norm_bic_refit) <- names(error_norm_bic_refit_nopen) <- names(error_norm_cv) <- names(error_norm_cv_nopen) <- c("1", "2", "F", "1_rel", "2_rel", "F_rel")
iters <- matrix(NA, nrow=length(modes), ncol=nlambda)
AUCs <- rep(NA, length(modes))
for (hi in 1:length(modes)){
if (modes[hi] == "g0") {
mode <- param1 <- param2 <- NULL
unif_dist <- get_g0(domain, param2s[hi])
} else {
mode <- modes[hi]; param1 <- param1s[hi]; param2 <- param2s[hi]
unif_dist <- NULL
}
re <- estimate(x, setting=setting, domain=domain, centered=centered,
symmetric="symmetric", scale=scale, lambda1s=NULL,
lambda_length=nlambda, lambda_ratio=lambda_ratio,
mode=mode, param1=param1, param2=param2, h_hp=NULL,
unif_dist=unif_dist, verbose=TRUE, verbosetext=paste("Mode ",hi,"/",length(modes),":",sep=""),
tol=tol, maxit=maxit, BIC_refit=BIC_refit, warmstart=TRUE,
diagonal_multiplier=diagonal_multiplier, eBIC_gammas=eBIC_gammas,
cv_fold=5, return_raw=TRUE, return_elts=TRUE)
tpfp[[hi]] <- Reduce("rbind", lapply(1:nlambda, function(i){
tp_fp(re$edgess[[i]], true_edges, p)}))
AUCs[hi] <- AUC(rbind(0, tpfp[[hi]][order(tpfp[[hi]][,2]), ], 1))
BIC_mins <- apply(re$BICs, 2, which.min)
BIC_refit_mins <- apply(re$BIC_refits, 2, which.min)
CV_min <- which.min(rowMeans(re$cv_losses))
for (gi in 1:length(eBIC_gammas)){
tpfp_bic[hi,(2*gi-1):(2*gi)] <- tpfp[[hi]][BIC_mins[gi], ]
tpfp_bic_refit[hi,(2*gi-1):(2*gi)] <- tpfp[[hi]][BIC_refit_mins[gi], ]
}
tpfp_cv[hi,] <- tpfp[[hi]][CV_min, ]
fit_nopen <- function(lambda_i){get_results(re$elts, "symmetric", 0, tol=tol, maxit=maxit, previous_res = list(lambda1=0,lambda2=0,centered=centered,K=diag(p),eta=rep(p),symmetric="symmetric",maxit=maxit,tol=tol,is_refit=F,edges=re$edgess[[lambda_i]],eta_support=which(abs(re$etas[[lambda_i]])>tol)), is_refit = T)$K}
K_bic_nopens <- lapply(1:length(eBIC_gammas), function(gi){fit_nopen(BIC_mins[gi])})
K_bic_refit_nopens <- lapply(1:length(eBIC_gammas), function(gi){fit_nopen(BIC_refit_mins[gi])})
K_cv_nopen <- fit_nopen(CV_min)
for (type in c("1", "2", "F")) {
type_rel <- paste(type,"_rel",sep="")
K_norm <- norm(K, type=type)
for (gi in 1:length(eBIC_gammas)){
error_norm_bic[[type]][hi,gi] <- norm(re$raw_estimates[[BIC_mins[gi]]] - K, type=type)
error_norm_bic_refit[[type]][hi,gi] <- norm(re$raw_estimates[[BIC_refit_mins[gi]]] - K, type=type)
error_norm_bic[[type_rel]][hi,gi] <- error_norm_bic[[type]][hi,gi] / K_norm
error_norm_bic_refit[[type_rel]][hi,gi] <- error_norm_bic_refit[[type]][hi,gi] / K_norm
error_norm_bic_nopen[[type]][hi,gi] <- norm(K_bic_nopens[[gi]] - K, type=type)
error_norm_bic_refit_nopen[[type]][hi,gi] <- norm(K_bic_refit_nopens[[gi]] - K, type=type)
error_norm_bic_nopen[[type_rel]][hi,gi] <- error_norm_bic_nopen[[type]][hi,gi] / K_norm
error_norm_bic_refit_nopen[[type_rel]][hi,gi] <- error_norm_bic_refit_nopen[[type]][hi,gi] / K_norm
}
error_norm_cv[[type]][hi] <- norm(re$raw_estimates[[CV_min]] - K, type=type)
error_norm_cv[[type_rel]][hi] <- error_norm_cv[[type]][hi] / K_norm
error_norm_cv_nopen[[type]][hi] <- norm(K_cv_nopen - K, type=type)
error_norm_cv_nopen[[type_rel]][hi] <- error_norm_cv_nopen[[type]][hi] / K_norm
}
iters[hi, ] <- re$iters
cat(re$iters, "\n")
remove(re)
cat("Mode", hi, "TPFP_BIC", tpfp_bic[hi,], "TPFP_BIC_REFIT", tpfp_bic_refit[hi,],
"TPFP_CV", tpfp_cv[hi], "\n")
}
re$etas
re$etas[[lambda_i]]
re$etas[[1]]
abs(re$etas[[1]])
ifelse(F, NULL, 1)
ifelse(T, NULL, 1)
re$converged
re$etas
fit_nopen <- function(lambda_i){get_results(re$elts, "symmetric", 0, tol=tol, maxit=maxit, previous_res = list(lambda1=0,lambda2=0,centered=centered,K=diag(p),eta=rep(p),symmetric="symmetric",maxit=maxit,tol=tol,is_refit=F,edges=re$edgess[[lambda_i]],eta_support=switch(1+is.null(re$etas),which(abs(re$etas[[lambda_i]])>tol),NULL)), is_refit = T)$K}
K_bic_nopens <- lapply(1:length(eBIC_gammas), function(gi){fit_nopen(BIC_mins[gi])})
K_bic_refit_nopens <- lapply(1:length(eBIC_gammas), function(gi){fit_nopen(BIC_refit_mins[gi])})
K_cv_nopen <- fit_nopen(CV_min)
K_bic_nopens
K_bic_refit_nopens
K_cv_nopen
for (type in c("1", "2", "F")) {
type_rel <- paste(type,"_rel",sep="")
K_norm <- norm(K, type=type)
for (gi in 1:length(eBIC_gammas)){
error_norm_bic[[type]][hi,gi] <- norm(re$raw_estimates[[BIC_mins[gi]]] - K, type=type)
error_norm_bic_refit[[type]][hi,gi] <- norm(re$raw_estimates[[BIC_refit_mins[gi]]] - K, type=type)
error_norm_bic[[type_rel]][hi,gi] <- error_norm_bic[[type]][hi,gi] / K_norm
error_norm_bic_refit[[type_rel]][hi,gi] <- error_norm_bic_refit[[type]][hi,gi] / K_norm
error_norm_bic_nopen[[type]][hi,gi] <- norm(K_bic_nopens[[gi]] - K, type=type)
error_norm_bic_refit_nopen[[type]][hi,gi] <- norm(K_bic_refit_nopens[[gi]] - K, type=type)
error_norm_bic_nopen[[type_rel]][hi,gi] <- error_norm_bic_nopen[[type]][hi,gi] / K_norm
error_norm_bic_refit_nopen[[type_rel]][hi,gi] <- error_norm_bic_refit_nopen[[type]][hi,gi] / K_norm
}
error_norm_cv[[type]][hi] <- norm(re$raw_estimates[[CV_min]] - K, type=type)
error_norm_cv[[type_rel]][hi] <- error_norm_cv[[type]][hi] / K_norm
error_norm_cv_nopen[[type]][hi] <- norm(K_cv_nopen - K, type=type)
error_norm_cv_nopen[[type_rel]][hi] <- error_norm_cv_nopen[[type]][hi] / K_norm
}
error_norm_bic
error_norm_bic_nopen
error_norm_bic_refit_nopen
error_norm_cv_nopen
switch(1+is.null(re$etas),which(abs(re$etas[[lambda_i]])>tol),NULL)
p
n
K_bic_nopens
hist(K_bic_nopens)
hist(K_bic_nopens$K)
hist(K_bic_nopens)
hist(K_bic_nopens[[1]])
hist(re$raw_estimates[[BIC_mins[1]]])
hist(K_bic_nopens[[1]])
fit_nopen
K_bic_nopens[[1]]
BIC_mins[1]
BIC_mins[2]
BIC_mins[3]
get_results(re$elts, "symmetric", 0, tol=tol, maxit=maxit)
get_results(re$elts, "symmetric", 0, tol=tol, maxit=maxit)$K
get_results(re$elts, "symmetric", 0, tol=tol, maxit=maxit, previous_res = list(lambda1=0,lambda2=0,centered=centered,K=diag(p),eta=rep(p),symmetric="symmetric",maxit=maxit,tol=tol,is_refit=F,edges=re$edgess[[lambda_i]],eta_support=switch(1+is.null(re$etas),which(abs(re$etas[[lambda_i]])>tol),NULL)), is_refit = T)$K
get_results(re$elts, "symmetric", 0, tol=tol, maxit=maxit, previous_res = list(lambda1=0,lambda2=0,centered=centered,K=diag(p),eta=rep(p),symmetric="symmetric",maxit=maxit,tol=tol,is_refit=F,edges=re$edgess[[200]],eta_support=switch(1+is.null(re$etas),which(abs(re$etas[[200]])>tol),NULL)), is_refit = T)$K
re$elts$diagonals_with_multiplier
re$elts$diagonals_with_multiplier <- re$elts$diagonals_with_multiplier / re$elts$diagonal_multiplier
get_results(re$elts, "symmetric", 0, tol=tol, maxit=maxit)
get_results(re$elts, "symmetric", 0, tol=tol, maxit=maxit)$K
get_results(re$elts, "symmetric", 0, tol=tol, maxit=maxit)$K - K_bic_nopens[[1]]
n
p
re$elts$diagonal_multiplier
re$elts$diagonals_with_multiplier <- re$elts$diagonals_with_multiplier * re$elts$diagonal_multiplier
get_results(re$elts, "symmetric", 0, tol=tol, maxit=maxit)$K
get_results(re$elts, "symmetric", 0, tol=tol, maxit=maxit)$K - K
get_results(re$elts, "symmetric", 0, tol=tol, maxit=maxit)$K
get_results(re$elts, "symmetric", 0, tol=tol, maxit=maxit)$K - K
K
get_results(re$elts, "symmetric", 0, tol=tol, maxit=maxit)$K
get_results(re$elts, "symmetric", 0, tol=tol, maxit=maxit)$K - K
norm(get_results(re$elts, "symmetric", 0, tol=tol, maxit=maxit)$K - K, "2")
norm(get_results(re$elts, "symmetric", 0, tol=tol, maxit=maxit)$K - K, "2") / norm(K, "2")
norm(get_results(re$elts, "symmetric", 0, tol=tol, maxit=maxit)$K - K, "1") / norm(K, "2")
norm(get_results(re$elts, "symmetric", 0, tol=tol, maxit=maxit)$K - K, "1") / norm(K, "1")
install.packages("GSM")
args <- c("1","100","20","0.5","0.1","ab_3/4_2/3","R+", "sub","0.5","0","hi","Inf","1","10","18","2","FALSE","5","3")
args <- c("1","100","20","0.5","0.1","ab_3/4_2/3","R+", "sub","0.5","0","hi","Inf","1","10","18","2","FALSE","5","3")
library(genscore)
if (length(args) != 19){
sink("ALERT.Rout")
stop("There must be exactly 19 arguments: trial number inside K, n, p, sparsity, smallest eigenvalue for K, setting, domain, domain_name, graph mode, eta mean, eta sd, diagonal multiplier:hi-mi-OR-lo, lambda ratio, trial number for K, batch (which hs), batch name (suffix for .dat), centered (T or F), trials (max of trial param), max_trial_sub (max of trial sub param).")
sink()
} else {
trial <- as.integer(args[1]) ## which trial for the same covariance
n <- as.integer(args[2])
p <- as.integer(args[3])
spars <- as.numeric(args[4])
eig <- as.numeric(args[5])
setting <- args[6]
if (!(setting %in% c("exp", "gamma", "gaussian", "log_log", "log_log_sum0") || startsWith(setting, "ab_"))){
stop("\"setting\" parameter must be one of exp, gamma, gaussian, log_log, log_log_sum0, or ab_A_B e.g. ab_1.2_0.9.")
}
domain_name <- args[7]
graph_mode <- args[8]
eta_mean <- as.numeric(args[9])
eta_sd <- as.numeric(args[10])
dm <- args[11]
if (!dm %in% c("hi", "mi", "lo")) {stop("The 11th argument (diagonal multiplier) must be hi, mi, or lo.")}
lambda_ratio <- as.numeric(args[12])
if (lambda_ratio < 0) stop("lambda_ratio must be non-negative (can be 0 or Inf).")
trial_sub <- as.integer(args[13]) ## seed for covariance
batch <- as.integer(args[14]):as.integer(args[15])
batchname <- args[16]
centered <- as.logical(args[17])
trials <- as.integer(args[18]) ## Used for auto-combining after all batches done and auto-aggregating after all trials and trial_subs done
max_trial_sub <- as.integer(args[19])
#args <- c("1","100","20","0.5","0.1","ab_3/4_2/3","R+", "sub","0.5","0","hi","Inf","1","10","18","2","FALSE","5","3")
}
n
p
spars
args <- c("1","1000","50","0.2","0.1","ab_3/2_1/2","R+", "sub","0","0","hi","Inf","1","1","45","1","TRUE","10","5")
if (length(args) != 19){
sink("ALERT.Rout")
stop("There must be exactly 19 arguments: trial number inside K, n, p, sparsity, smallest eigenvalue for K, setting, domain, domain_name, graph mode, eta mean, eta sd, diagonal multiplier:hi-mi-OR-lo, lambda ratio, trial number for K, batch (which hs), batch name (suffix for .dat), centered (T or F), trials (max of trial param), max_trial_sub (max of trial sub param).")
sink()
} else {
trial <- as.integer(args[1]) ## which trial for the same covariance
n <- as.integer(args[2])
p <- as.integer(args[3])
spars <- as.numeric(args[4])
eig <- as.numeric(args[5])
setting <- args[6]
if (!(setting %in% c("exp", "gamma", "gaussian", "log_log", "log_log_sum0") || startsWith(setting, "ab_"))){
stop("\"setting\" parameter must be one of exp, gamma, gaussian, log_log, log_log_sum0, or ab_A_B e.g. ab_1.2_0.9.")
}
domain_name <- args[7]
graph_mode <- args[8]
eta_mean <- as.numeric(args[9])
eta_sd <- as.numeric(args[10])
dm <- args[11]
if (!dm %in% c("hi", "mi", "lo")) {stop("The 11th argument (diagonal multiplier) must be hi, mi, or lo.")}
lambda_ratio <- as.numeric(args[12])
if (lambda_ratio < 0) stop("lambda_ratio must be non-negative (can be 0 or Inf).")
trial_sub <- as.integer(args[13]) ## seed for covariance
batch <- as.integer(args[14]):as.integer(args[15])
batchname <- args[16]
centered <- as.logical(args[17])
trials <- as.integer(args[18]) ## Used for auto-combining after all batches done and auto-aggregating after all trials and trial_subs done
max_trial_sub <- as.integer(args[19])
#args <- c("1","1000","50","0.2","0.1","ab_3/2_1/2","R+", "sub","0","0","hi","Inf","1","1","45","1","TRUE","10","5")
}
args <- c("1","1000","50","0.2","0.1","ab_3/2_1/2","l2_c_nn", "sub","0","0","hi","Inf","1","1","45","1","TRUE","10","5")
if (length(args) != 19){
sink("ALERT.Rout")
stop("There must be exactly 19 arguments: trial number inside K, n, p, sparsity, smallest eigenvalue for K, setting, domain, domain_name, graph mode, eta mean, eta sd, diagonal multiplier:hi-mi-OR-lo, lambda ratio, trial number for K, batch (which hs), batch name (suffix for .dat), centered (T or F), trials (max of trial param), max_trial_sub (max of trial sub param).")
sink()
} else {
trial <- as.integer(args[1]) ## which trial for the same covariance
n <- as.integer(args[2])
p <- as.integer(args[3])
spars <- as.numeric(args[4])
eig <- as.numeric(args[5])
setting <- args[6]
if (!(setting %in% c("exp", "gamma", "gaussian", "log_log", "log_log_sum0") || startsWith(setting, "ab_"))){
stop("\"setting\" parameter must be one of exp, gamma, gaussian, log_log, log_log_sum0, or ab_A_B e.g. ab_1.2_0.9.")
}
domain_name <- args[7]
graph_mode <- args[8]
eta_mean <- as.numeric(args[9])
eta_sd <- as.numeric(args[10])
dm <- args[11]
if (!dm %in% c("hi", "mi", "lo")) {stop("The 11th argument (diagonal multiplier) must be hi, mi, or lo.")}
lambda_ratio <- as.numeric(args[12])
if (lambda_ratio < 0) stop("lambda_ratio must be non-negative (can be 0 or Inf).")
trial_sub <- as.integer(args[13]) ## seed for covariance
batch <- as.integer(args[14]):as.integer(args[15])
batchname <- args[16]
centered <- as.logical(args[17])
trials <- as.integer(args[18]) ## Used for auto-combining after all batches done and auto-aggregating after all trials and trial_subs done
max_trial_sub <- as.integer(args[19])
#args <- c("1","1000","50","0.2","0.1","ab_3/2_1/2","l2_c_nn", "sub","0","0","hi","Inf","1","1","45","1","TRUE","10","5")
}
nlambda <- 200
BIC_refit <- T
maxit <- 1e5
tol <- 1e-6
if (domain_name == "simplex" && setting == "log_log_sum0") {
K <- -as.matrix(cov_cons(mode=graph_mode, p=p, seed=p*n+trial_sub, spars=spars, eig=eig, subgraphs = p / 10))
#K <- -cov_cons("band", p, seed=1, spars=3)
diag(K) <- diag(K) - rowSums(K)
tmp <- min(eigen(K)$val)
if (tmp < -tol) stop("min(eigen(K)$val) = ", tmp, ".")
} else {
K <- as.matrix(cov_cons(mode = graph_mode, p = p, seed = p*n+trial_sub, spars = spars, eig = eig, subgraphs = p / 10))
}
true_edges <- which(abs(K) > tol & diag(p) == 0)
eBIC_gammas <- c(0,0.5,1)
if (domain_name %in% c("R", "R+", "simplex")) {domain <- make_domain(domain_name, p=p)
} else if (domain_name == "l2") {domain <- make_domain("polynomial", p=p, ineqs=list(list(expression=paste("sum(x^2)<=",p), nonnegative=F, abs=F)))
} else if (domain_name == "l2_nn") {domain <- make_domain("polynomial", p=p, ineqs=list(list(expression=paste("sum(x^2)<=",p), nonnegative=T, abs=F)))
} else if (domain_name == "l2_c") {domain <- make_domain("polynomial", p=p, ineqs=list(list(expression=paste("sum(x^2)>=",p), nonnegative=F, abs=F)))
} else if (domain_name == "l2_c_nn") {domain <- make_domain("polynomial", p=p, ineqs=list(list(expression=paste("sum(x^2)>=",p), nonnegative=T, abs=F)))
} else if (domain_name == "unif") {domain <- make_domain("uniform", p=p, lefts=c(-Inf, 1), rights=c(-1, Inf))
} else if (domain_name == "unif_nn") {domain <- make_domain("uniform", p=p, lefts=c(1), rights=c(Inf))
} else stop("domain_name ", domain_name, " not supported!")
scale <- ifelse(domain$type %in% c("R", "R+"), "norm", "")
if (dm == "hi") diagonal_multiplier <- 1 + (1-1/(1+4*exp(1)*max(6*log(p)/n, sqrt(6*log(p)/n))))
if (dm == "mi") diagonal_multiplier <- 1 + (1-1/(1+4*exp(1)*6*log(p)/n)) ## 1
if (dm == "lo") diagonal_multiplier <- 1
filename <- paste(gsub("/", "|",  setting), "_n",n, "p",p, "s",spars, "e",eig, "_G",graph_mode,
"_DOM",domain_name, "_t",trial_sub, "tt",trial, "_eta",eta_mean,
"_",eta_sd, "_",ifelse(centered,"c",paste("nc_LR",lambda_ratio,sep="")),
"_dm",round(diagonal_multiplier,4), ".dat", batchname,sep="")
set.seed(trial_sub)
eta <- rnorm(p, eta_mean, eta_sd)
pows <- c(seq(0.25, 2, by=0.25))
truncs <- c(0.5, 1, 1.5, 2, 3)
param1s <- rep(pows, each=length(truncs))
param2s <- rep(truncs, length(pows))
modes <- rep("min_pow", length(param1s))
h_names <- sapply(1:length(modes), function(i){paste(ifelse(param2s[i]==Inf,"x",paste("min(x,",param2s[i],")",sep="")), ifelse(param1s[i]==1,"",paste("^",param1s[i],sep="")), sep="")})
modes <- c(modes, rep("g0", length(truncs)))
param1s <- c(param1s, rep(NA, length(truncs)))
param2s <- c(param2s, truncs)
h_names <- c(h_names, paste("pmin(g0(x), ", truncs, ")", sep=""))
x <- gen(n, setting=setting, abs=FALSE, eta=eta, K=K, domain=domain, finite_infinity=1000,
xinit=NULL, seed=trial + (trial_sub - 1) * trials, burn_in=1000, thinning=100,
verbose=TRUE, remove_outofbound=TRUE)
tpfp <- list()
tpfp_bic <- matrix(NA, nrow=length(modes), ncol=2*length(eBIC_gammas))
tpfp_bic_refit <- matrix(NA, nrow=length(modes), ncol=2*length(eBIC_gammas))
tpfp_cv <- matrix(NA, nrow=length(modes), ncol=2)
error_norm_bic <- error_norm_bic_nopen <- error_norm_bic_refit <- error_norm_bic_refit_nopen <- lapply(1:6, function(i){matrix(NA, nrow=length(modes), ncol=length(eBIC_gammas))})
error_norm_cv <- error_norm_cv_nopen <- lapply(1:6, function(i){matrix(NA, nrow=length(modes), ncol=1)})
names(error_norm_bic) <- names(error_norm_bic_nopen) <- names(error_norm_bic_refit) <- names(error_norm_bic_refit_nopen) <- names(error_norm_cv) <- names(error_norm_cv_nopen) <- c("1", "2", "F", "1_rel", "2_rel", "F_rel")
iters <- matrix(NA, nrow=length(modes), ncol=nlambda)
AUCs <- rep(NA, length(modes))
times <- c()
Sys.time()
Sys.time() - Sys.time()
Sys.time() - Sys.time()
Sys.time() - Sys.time()
for (hi in 1:length(modes)){
t1 <- Sys.time() ##
if (modes[hi] == "g0") {
mode <- param1 <- param2 <- NULL
unif_dist <- get_g0(domain, param2s[hi])
} else {
mode <- modes[hi]; param1 <- param1s[hi]; param2 <- param2s[hi]
unif_dist <- NULL
}
re <- estimate(x, setting=setting, domain=domain, centered=centered,
symmetric="symmetric", scale=scale, lambda1s=NULL,
lambda_length=nlambda, lambda_ratio=lambda_ratio,
mode=mode, param1=param1, param2=param2, h_hp=NULL,
unif_dist=unif_dist, verbose=TRUE, verbosetext=paste("Mode ",hi,"/",length(modes),":",sep=""),
tol=tol, maxit=maxit, BIC_refit=BIC_refit, warmstart=TRUE,
diagonal_multiplier=diagonal_multiplier, eBIC_gammas=eBIC_gammas,
cv_fold=5, return_raw=TRUE, return_elts=TRUE)
tpfp[[hi]] <- Reduce("rbind", lapply(1:nlambda, function(i){
tp_fp(re$edgess[[i]], true_edges, p)}))
AUCs[hi] <- AUC(rbind(0, tpfp[[hi]][order(tpfp[[hi]][,2]), ], 1))
BIC_mins <- apply(re$BICs, 2, which.min)
BIC_refit_mins <- apply(re$BIC_refits, 2, which.min)
CV_min <- which.min(rowMeans(re$cv_losses))
for (gi in 1:length(eBIC_gammas)){
tpfp_bic[hi,(2*gi-1):(2*gi)] <- tpfp[[hi]][BIC_mins[gi], ]
tpfp_bic_refit[hi,(2*gi-1):(2*gi)] <- tpfp[[hi]][BIC_refit_mins[gi], ]
}
tpfp_cv[hi,] <- tpfp[[hi]][CV_min, ]
fit_nopen <- function(lambda_i){get_results(re$elts, "symmetric", 0, tol=tol, maxit=maxit, previous_res = list(lambda1=0,lambda2=0,centered=centered,K=diag(p),eta=rep(p),symmetric="symmetric",maxit=maxit,tol=tol,is_refit=F,edges=re$edgess[[lambda_i]],eta_support=switch(1+is.null(re$etas),which(abs(re$etas[[lambda_i]])>tol),NULL)), is_refit = T)$K}
K_bic_nopens <- lapply(1:length(eBIC_gammas), function(gi){fit_nopen(BIC_mins[gi])})
K_bic_refit_nopens <- lapply(1:length(eBIC_gammas), function(gi){fit_nopen(BIC_refit_mins[gi])})
K_cv_nopen <- fit_nopen(CV_min)
for (type in c("1", "2", "F")) {
type_rel <- paste(type,"_rel",sep="")
K_norm <- norm(K, type=type)
for (gi in 1:length(eBIC_gammas)){
error_norm_bic[[type]][hi,gi] <- norm(re$raw_estimates[[BIC_mins[gi]]] - K, type=type)
error_norm_bic_refit[[type]][hi,gi] <- norm(re$raw_estimates[[BIC_refit_mins[gi]]] - K, type=type)
error_norm_bic[[type_rel]][hi,gi] <- error_norm_bic[[type]][hi,gi] / K_norm
error_norm_bic_refit[[type_rel]][hi,gi] <- error_norm_bic_refit[[type]][hi,gi] / K_norm
error_norm_bic_nopen[[type]][hi,gi] <- norm(K_bic_nopens[[gi]] - K, type=type)
error_norm_bic_refit_nopen[[type]][hi,gi] <- norm(K_bic_refit_nopens[[gi]] - K, type=type)
error_norm_bic_nopen[[type_rel]][hi,gi] <- error_norm_bic_nopen[[type]][hi,gi] / K_norm
error_norm_bic_refit_nopen[[type_rel]][hi,gi] <- error_norm_bic_refit_nopen[[type]][hi,gi] / K_norm
}
error_norm_cv[[type]][hi] <- norm(re$raw_estimates[[CV_min]] - K, type=type)
error_norm_cv[[type_rel]][hi] <- error_norm_cv[[type]][hi] / K_norm
error_norm_cv_nopen[[type]][hi] <- norm(K_cv_nopen - K, type=type)
error_norm_cv_nopen[[type_rel]][hi] <- error_norm_cv_nopen[[type]][hi] / K_norm
}
iters[hi, ] <- re$iters
cat(re$iters, "\n")
remove(re)
cat("Mode", hi, "TPFP_BIC", tpfp_bic[hi,], "TPFP_BIC_REFIT", tpfp_bic_refit[hi,],
"TPFP_CV", tpfp_cv[hi], "\n")
times[hi]  <- Sys.time() - t1 ##
cat("Time: ", times[hi], "\n") ##
}
times
AUCs
n
p
spars
h_names
times
p
n
serting
setting
domain_name <- "R+"
if (domain_name == "simplex" && setting == "log_log_sum0") {
K <- -as.matrix(cov_cons(mode=graph_mode, p=p, seed=p*n+trial_sub, spars=spars, eig=eig, subgraphs = p / 10))
#K <- -cov_cons("band", p, seed=1, spars=3)
diag(K) <- diag(K) - rowSums(K)
tmp <- min(eigen(K)$val)
if (tmp < -tol) stop("min(eigen(K)$val) = ", tmp, ".")
} else {
K <- as.matrix(cov_cons(mode = graph_mode, p = p, seed = p*n+trial_sub, spars = spars, eig = eig, subgraphs = p / 10))
}
true_edges <- which(abs(K) > tol & diag(p) == 0)
eBIC_gammas <- c(0,0.5,1)
if (domain_name %in% c("R", "R+", "simplex")) {domain <- make_domain(domain_name, p=p)
} else if (domain_name == "l2") {domain <- make_domain("polynomial", p=p, ineqs=list(list(expression=paste("sum(x^2)<=",p), nonnegative=F, abs=F)))
} else if (domain_name == "l2_nn") {domain <- make_domain("polynomial", p=p, ineqs=list(list(expression=paste("sum(x^2)<=",p), nonnegative=T, abs=F)))
} else if (domain_name == "l2_c") {domain <- make_domain("polynomial", p=p, ineqs=list(list(expression=paste("sum(x^2)>=",p), nonnegative=F, abs=F)))
} else if (domain_name == "l2_c_nn") {domain <- make_domain("polynomial", p=p, ineqs=list(list(expression=paste("sum(x^2)>=",p), nonnegative=T, abs=F)))
} else if (domain_name == "unif") {domain <- make_domain("uniform", p=p, lefts=c(-Inf, 1), rights=c(-1, Inf))
} else if (domain_name == "unif_nn") {domain <- make_domain("uniform", p=p, lefts=c(1), rights=c(Inf))
} else stop("domain_name ", domain_name, " not supported!")
scale <- ifelse(domain$type %in% c("R", "R+"), "norm", "")
if (dm == "hi") diagonal_multiplier <- 1 + (1-1/(1+4*exp(1)*max(6*log(p)/n, sqrt(6*log(p)/n))))
if (dm == "mi") diagonal_multiplier <- 1 + (1-1/(1+4*exp(1)*6*log(p)/n)) ## 1
if (dm == "lo") diagonal_multiplier <- 1
x <- gen(n, setting=setting, abs=FALSE, eta=eta, K=K, domain=domain, finite_infinity=1000,
xinit=NULL, seed=trial + (trial_sub - 1) * trials, burn_in=1000, thinning=100,
verbose=TRUE, remove_outofbound=TRUE)
tpfp <- list()
tpfp_bic <- matrix(NA, nrow=length(modes), ncol=2*length(eBIC_gammas))
tpfp_bic_refit <- matrix(NA, nrow=length(modes), ncol=2*length(eBIC_gammas))
tpfp_cv <- matrix(NA, nrow=length(modes), ncol=2)
error_norm_bic <- error_norm_bic_nopen <- error_norm_bic_refit <- error_norm_bic_refit_nopen <- lapply(1:6, function(i){matrix(NA, nrow=length(modes), ncol=length(eBIC_gammas))})
error_norm_cv <- error_norm_cv_nopen <- lapply(1:6, function(i){matrix(NA, nrow=length(modes), ncol=1)})
names(error_norm_bic) <- names(error_norm_bic_nopen) <- names(error_norm_bic_refit) <- names(error_norm_bic_refit_nopen) <- names(error_norm_cv) <- names(error_norm_cv_nopen) <- c("1", "2", "F", "1_rel", "2_rel", "F_rel")
iters <- matrix(NA, nrow=length(modes), ncol=nlambda)
AUCs <- rep(NA, length(modes))
times <- rep(0,45)
for (hi in 1:length(modes)){
t1 <- Sys.time() ##
if (modes[hi] == "g0") {
mode <- param1 <- param2 <- NULL
unif_dist <- get_g0(domain, param2s[hi])
} else {
mode <- modes[hi]; param1 <- param1s[hi]; param2 <- param2s[hi]
unif_dist <- NULL
}
re <- estimate(x, setting=setting, domain=domain, centered=centered,
symmetric="symmetric", scale=scale, lambda1s=NULL,
lambda_length=nlambda, lambda_ratio=lambda_ratio,
mode=mode, param1=param1, param2=param2, h_hp=NULL,
unif_dist=unif_dist, verbose=TRUE, verbosetext=paste("Mode ",hi,"/",length(modes),":",sep=""),
tol=tol, maxit=maxit, BIC_refit=BIC_refit, warmstart=TRUE,
diagonal_multiplier=diagonal_multiplier, eBIC_gammas=eBIC_gammas,
cv_fold=5, return_raw=TRUE, return_elts=TRUE)
tpfp[[hi]] <- Reduce("rbind", lapply(1:nlambda, function(i){
tp_fp(re$edgess[[i]], true_edges, p)}))
AUCs[hi] <- AUC(rbind(0, tpfp[[hi]][order(tpfp[[hi]][,2]), ], 1))
BIC_mins <- apply(re$BICs, 2, which.min)
BIC_refit_mins <- apply(re$BIC_refits, 2, which.min)
CV_min <- which.min(rowMeans(re$cv_losses))
for (gi in 1:length(eBIC_gammas)){
tpfp_bic[hi,(2*gi-1):(2*gi)] <- tpfp[[hi]][BIC_mins[gi], ]
tpfp_bic_refit[hi,(2*gi-1):(2*gi)] <- tpfp[[hi]][BIC_refit_mins[gi], ]
}
tpfp_cv[hi,] <- tpfp[[hi]][CV_min, ]
fit_nopen <- function(lambda_i){get_results(re$elts, "symmetric", 0, tol=tol, maxit=maxit, previous_res = list(lambda1=0,lambda2=0,centered=centered,K=diag(p),eta=rep(p),symmetric="symmetric",maxit=maxit,tol=tol,is_refit=F,edges=re$edgess[[lambda_i]],eta_support=switch(1+is.null(re$etas),which(abs(re$etas[[lambda_i]])>tol),NULL)), is_refit = T)$K}
K_bic_nopens <- lapply(1:length(eBIC_gammas), function(gi){fit_nopen(BIC_mins[gi])})
K_bic_refit_nopens <- lapply(1:length(eBIC_gammas), function(gi){fit_nopen(BIC_refit_mins[gi])})
K_cv_nopen <- fit_nopen(CV_min)
for (type in c("1", "2", "F")) {
type_rel <- paste(type,"_rel",sep="")
K_norm <- norm(K, type=type)
for (gi in 1:length(eBIC_gammas)){
error_norm_bic[[type]][hi,gi] <- norm(re$raw_estimates[[BIC_mins[gi]]] - K, type=type)
error_norm_bic_refit[[type]][hi,gi] <- norm(re$raw_estimates[[BIC_refit_mins[gi]]] - K, type=type)
error_norm_bic[[type_rel]][hi,gi] <- error_norm_bic[[type]][hi,gi] / K_norm
error_norm_bic_refit[[type_rel]][hi,gi] <- error_norm_bic_refit[[type]][hi,gi] / K_norm
error_norm_bic_nopen[[type]][hi,gi] <- norm(K_bic_nopens[[gi]] - K, type=type)
error_norm_bic_refit_nopen[[type]][hi,gi] <- norm(K_bic_refit_nopens[[gi]] - K, type=type)
error_norm_bic_nopen[[type_rel]][hi,gi] <- error_norm_bic_nopen[[type]][hi,gi] / K_norm
error_norm_bic_refit_nopen[[type_rel]][hi,gi] <- error_norm_bic_refit_nopen[[type]][hi,gi] / K_norm
}
error_norm_cv[[type]][hi] <- norm(re$raw_estimates[[CV_min]] - K, type=type)
error_norm_cv[[type_rel]][hi] <- error_norm_cv[[type]][hi] / K_norm
error_norm_cv_nopen[[type]][hi] <- norm(K_cv_nopen - K, type=type)
error_norm_cv_nopen[[type_rel]][hi] <- error_norm_cv_nopen[[type]][hi] / K_norm
}
iters[hi, ] <- re$iters
cat(re$iters, "\n")
remove(re)
cat("Mode", hi, "TPFP_BIC", tpfp_bic[hi,], "TPFP_BIC_REFIT", tpfp_bic_refit[hi,],
"TPFP_CV", tpfp_cv[hi], "\n")
times[hi]  <- Sys.time() - t1 ##
cat("Time: ", times[hi], "\n") ##
}
AUCs
plot(AUCs)
times
plot(timees)
plot(times)
